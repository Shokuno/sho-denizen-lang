'scopeName': 'source.sho-denizen-language'
'name': 'Denizen Language'
'fileTypes': ['yml', 'yaml']

'patterns': [
    {
        # Mark script name
        'match': '(^[^\\s#]\\w+):'
        'name': 'scriptname.sho-denizen-language'
    },
    {
        # Mark numbers
        'include': '#numeric_constants_rule'
    },
    {
        # Mark all 'SOMETHING:' statements'
        'match': '(\\bchat\\b|\\bclick\\b|\\binteract\\b|\\bdamage\\b|\\bproximity\\b) (\\btrigger:)( (\\b\\w+\\b)|[\\w \'/]+|\\n)|(\\b[a-zA-Z]+:)(\\%.+?\\%|<def\\[[a-zA-Z0-9]+\\]>)|(\\b[a-zA-Z]+:)(([0-9]+)|([a-zA-Z]+| \\b\\w+\\b|[\\w \'/]+|\\n))|\\s+([0-9]+:)'
        'captures':
            '1':
                'name': 'run.sho-denizen-language'
            '2':
                'name': 'run.sho-denizen-language'
            '5':
                'name': 'run.sho-denizen-language'
            '6':
                'name': 'variable.sho-denizen-language'
            '7':
                'name': 'run.sho-denizen-language'
            '9':
                'name': 'constant.numeric.sho-denizen-language'
            '11':
                'name': 'run.sho-denizen-language'
    },
    {
        # Mark all 'on EVENT:' statements, Overwrites variable highlighting
        'match': '^\\s+(on \\b[a-z 0-9]+:\\n)'
        'captures':
            '1':
                'name': 'events.sho-denizen-language'
        'name': 'event.sho-denizen-language'
    },
    {
        # Mark variables
        'include': '#variables_rule'
    },
    {
        # Mark all command words proceeded by -
        'match': '(- (\\^|)determine|- (\\^|)execute|- (\\^|)give|- (\\^|)teleport|- (\\^|)flag|- (\\^|)finish|- (^|)fail|\\- (\\^|)log|- (\\^|)new|- (\\^|)zap|- (\\^|)queue|- (\\^|)narrate|-  (\\^|)adjust|- (\\^|)inventory|- (\\^|)debug|- (\\^|)engage|- (\\^|)disengage|- (\\^|)lookclose|- (\\^|)pose|- (\\^|)queue|- (\\^|)wait|- (\\^|)take|- (\\^|)inject|- (\\^|)run|- (\\^|)trigger|- (\\^|)define|- (\\^|)chat)'
        'name': 'command.core.denizen'
    },
    {
        # Mark yaml
        'match': '(\\- (\\^|)yaml create id:|\\- (\\^|)yaml|\\id:)'
        'name': 'command.yaml.create.denizen'
    },
    {
        # Mark Strings (double quote)
        'begin': '\"'
        'beginCaptures':
            '0':
                'name': 'punctuation.definition.string.begin.sho-denizen-language'
        'end': '\"'
        'endCaptures':
            '0':
                'name': 'punctuation.definition.string.end.sho-denizen-language'
        'name': 'string.quoted.double.sho-denizen-language'
        'patterns': [
            {
                # Mark variables
                'include': '#variables_rule'
            },
            {
                # Marks tags inside quotes
                'include': '#tags_rule'
            }
        ]
    },
    {
        # Marks tags
        'include': '#tags_rule'
    },
#    {
#        # OLD Else and Else If
#        'match': '(\\} else {|\\} else if )'
#        'name': 'statement.else.denizen'
#    },
#    {
#        # OLD ( if 'conditions' { 'then' } ) If, foreach, random and all logical operators
#        'match': '(- (\\^|)if|- (\\^|)while|- (\\^|)repeat|- (\\^|)random|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\&gt;\\s|\\&lt;\\s|\\{|\\}|- (\\^|)foreach|- (\\^|)choose|- (\\^|)case)'
#        'name': 'statement.if.denizen'
#    },
    {
        # NEW ( if 'conditions': 'then' ): Mark If, else if and all logical operators
        'begin': '- (\^|)(if|else if)'
        'beginCaptures':
            '0':
                'name': 'statement.if.sho-denizen-language'
        'end': '(:)'
        'endCaptures':
            '0':
                'name': 'statement.if.sho-denizen-language'
        'patterns': [
            {
                # Mark logical operators
                'include': '#logical_operators_rule'
            },
            {
                # Mark numbers
                'include': '#numeric_constants_rule'
            },
            {
                # Mark variables
                'include': '#variables_rule'
            },
            {
                # Marks tags inside quotes
                'include': '#tags_rule'
            }
        ]
    },
    {
        # NEW ( - else: ): Mark else
        'match': '- else:'
        'name': 'statement.if.sho-denizen-language'
    },
#    {
#        # NEW ( foreach 'list': ) foreach, while, choose
#        'match': '(- (\\^|)if|- (\\^|)while|- (\\^|)repeat|- (\\^|)random|\\=\\=|\\!\\=|\\&\\&|\\|\\||\\&gt;\\s|\\&lt;\\s|\\{|\\}|- (\\^|)foreach|- (\\^|)choose|- (\\^|)case)'
#        'name': 'statement.if.sho-denizen-language'
#    },
    {
        # Mark # line comments
        'match': '(#.*)'
        'captures':
            '1':
                'name': 'comment.line.number-sign.sho-denizen-language'
        'name': 'customcomment.sho-denizen-language'
    }
]


# The repository is a list of rules that can be referenced else where using include
'repository':
    # Mark tags
    'tags_rule': {
        # Mark tags
        'begin': '<'
        'beginCaptures':
            '0':
                'name': 'tags.sho-denizen-language'
        'end': '>'
        'endCaptures':
            '0':
                'name': 'tags.sho-denizen-language'
        'name': 'raw.sho-denizen-language'

        # Marks text inside tags
        'patterns': [
            # include itself to still highlight tag pairs inside tags
            {
                'include': '#tags_rule'
            },
            {
                # Marks '[' and ']' inside tags
                'include': '#square_brackets_rule'
            }
        ]
    }

    # Mark square brackets
    'square_brackets_rule': {
        'begin': '\\['
        'beginCaptures':
            '0':
                'name': 'brackets.sho-denizen-language'
        'end': '\\]'
        'endCaptures':
            '0':
                'name': 'brackets.sho-denizen-language'
        'name': 'custombrackets.sho-denizen-language'

        'patterns': [
            # include tags to still highlight tag pairs inside brackets
            {
                'include': '#tags_rule'
            }
        ]
    }

    # Mark variables
    'variables_rule': {
        'match': '(\\%.+?\\%|<def\\[[a-zA-Z0-9]+\\]>)'
        'name': 'variable.sho-denizen-language'
    }

    # Mark logical operators
    'logical_operators_rule': {
        'match': '(<|>|\\!|\\=)\\=|\\|\\||\\&\\&| matches '
        'name': 'statement.if.sho-denizen-language'
    }

    # Mark numeric constants
    'numeric_constants_rule': {
        'match': '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b'
        'name': 'constant.numeric.sho-denizen-language'
    },
